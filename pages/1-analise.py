import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.subplots as sp
import plotly.graph_objects as go
import sys
import os

sys.path.append(os.path.abspath(".."))
from src.utils import DataWrangling

# ----- FUNCTIONS -----

@st.cache_data
def load_data():
    '''
    Carrega e processa os dados do arquivo .csv
    '''
    df = pd.read_csv('artifacts/data.csv')
    df = DataWrangling().fit_transform(df)
    
    return df

def plot_bar(data, x, y, color, title, xlabel, ylabel):
    """
    Cria um gr√°fico de barras utilizando Plotly Express
    """
    fig = px.bar(
        data,
        x = x,
        y = y,
        color = color,
        title = title,
        labels = {x: xlabel, y: ylabel},
        color_discrete_sequence=['#669bbc', '#bc4749']
    )

    fig.update_layout(
        plot_bgcolor = 'rgba(0, 0, 0, 0)',
        xaxis_title = xlabel,
        yaxis_title = ylabel,
        showlegend=False
    )

    return fig

# ----- DATA -----

df = load_data()

# ----- PAGE -----

st.title('''
    üí≥ Modelo de Risco de Cr√©dito
    ---
    ''')

st.header('üìå Vis√£o Geral')
    
st.markdown('Esse projeto teve como objetivo identificar potenciais clientes inadimplentes de uma institui√ß√£o de cart√£o de cr√©dito. Foram utilizadas t√©cnicas de an√°lise de dados e machine learning para detectar poss√≠veis inadimpl√™ncias e reduzir preju√≠zos futuros.')

st.header('üíº Entendimento do Neg√≥cio')

st.markdown('''
    De acordo com o Instituto Locomotiva e MFM Tecnologia, oito em cada dez fam√≠lias brasileiras estiveram endividadas, e um ter√ßo teve d√≠vidas em atraso. Os √≠ndices, que haviam piorado significativamente durante a pandemia da covid-19, j√° recuaram, mas ainda s√£o elevados, segundo o relat√≥rio.

    Um dos principais motivos para a inadimpl√™ncia foi o cart√£o de cr√©dito, de acordo com a pesquisa. O meio de pagamento foi a fonte de 60% dos d√©bitos em aberto no ano de 2023. Deixar de liquidar d√≠vidas junto a bancos e financeiras, assim como empr√©stimos e financiamentos, tamb√©m tem sido um desafio para grande parte dos brasileiros. Uma parcela de 43% lidou com isso atualmente, propor√ß√£o que subiu em rela√ß√£o ao ano passado, quando era de 40%.

    Essa situa√ß√£o foi prejudicial tanto para os consumidores quanto para as institui√ß√µes financeiras. Detectar os padr√µes de consumidores que ficaram inadimplentes nos √∫ltimos meses e ter se planejado quanto a isso poderiam ter economizado milh√µes de reais.
    ---
    ''')
    
st.header('1. Introdu√ß√£o')

st.markdown('''
    O cliente, uma empresa de cart√£o de cr√©dito, nos trouxe um dataset que incluiu os dados demogr√°ficos e financeiros recentes de uma amostra de 30.000 clientes. Esses dados estiveram no n√≠vel de conta de cr√©dito (ou seja, uma linha para cada conta). As linhas foram rotuladas de acordo com se, no m√™s seguinte ao per√≠odo de dados hist√≥ricos de seis meses, um propriet√°rio de conta ficou inadimplente, ou seja, n√£o fez o pagamento m√≠nimo.

    **Objetivo**: Nosso objetivo como Cientista de Dados foi desenvolver um modelo, com os dados fornecidos, que previsse se uma conta ficaria inadimplente no pr√≥ximo m√™s.
''')


st.header('2. Os dados')
st.subheader('Dicion√°rio')

st.markdown(
    '''
    | Feature                      | Descri√ß√£o |
    | ---                          | --- |
    | `ID`                         | Coluna de identifica√ß√£o exclusiva da conta |
    | `LIMIT_BAL`                  | valor do cr√©dito fornecido inclusive o cr√©dito do consumidor individual e familiar (complementar) |
    | `SEX`                        | G√™nero (1 = masculino; 2 = feminino) |
    | `EDUCATION`                  | Instru√ß√£o civil (1 = p√≥s-gradua√ß√£o; 2 = universidade; 3 = ensino m√©dio; 4 = outros). |
    | `MARRIAGE`                   | Estado civil (1 = casado; 2 = solteiro; 3 = outros). |
    | `AGE`                        | Idade (ano). |
    | `PAY_1`-`PAY_6`              | Registro do ultimo pagamento. A escala de medida do status de reembolso √© a seguinte: -2 = conta come√ßou o m√™s sem valor a ser pago e o cr√©dito n√£o foi usado; -1 = pagamento pontual; 0 = o pagamento m√≠nimo foi feito, mas o saldo total devedor n√£o foi pago; 1 a 8 = atraso de um a oito m√™ses no pagamento; 9 = atraso de nove meses ou mais no pagamento. |
    | `BILL_AMT1`-`BILL_AMT6`      | Valor da fatura; BILL_AMT1 representa o valor da fatura em setembro; BILL_AMT2 representa o valor da fatura em agosto; e assim por diante at√© BILL_AMT7, que representa o valor da fatura em abril. |
    | `PAY_AMT1`-`PAY_AMT6`        | Valor de pagamentos anteriores; PAY_AMT1 representa o valor pago em setembro; PAY_AMT2 representa o valor pago em agosto; e assim por diante at√© PAY_AMT6, que representa o valor pago em abril. |
    | `default payment next month` | Inadimpl√™ncia (Alvo) |

    **O dataset conta com:**
    
    - 30000 registros e 25 colunas
    '''
)

st.subheader('Qualidade dos dados')

st.markdown('- N√£o h√° valores nulos ou duplicados')

st.subheader('Limpeza e manipula√ß√£o')

st.markdown('''
    - Foram identificados e removidos registros com valores zerados em todas as suas features;
    - O valor "Not available" da feature `PAY_1` foi alterado para seu valor mais frequente;
    - Valores n√£o identificados no dicion√°rio nas features `EDUCATION` e `MARRIAGE` foram alterados para outros;
    - Uma nova feature de categoria para `EDUCATION` foi criada;
    - Problemas na captura de dados das colunas `PAY_2`, `PAY_3`, `PAY_4`, `PAY_5` e `PAY_6` foram identificados, e por isso, essas colunas foram removidas.
    '''
)

st.header('3. An√°lise Explorat√≥ria dos Dados')
st.subheader('`default payment next month`')

target = df['default payment next month'].value_counts(normalize = True).reset_index()
target['proportion'] = (target['proportion'] * 100).round(2)
target['default payment next month'] = target['default payment next month'].replace({0:'N√£o', 1:'Sim'})

st.plotly_chart(
    plot_bar(
        target,
        x='default payment next month',
        y='proportion',
        color='default payment next month',               
        title='Distribui√ß√£o de Inadimpl√™ncia',
        xlabel = 'Inadimpl√™ncia',
        ylabel = 'Propor√ß√£o'),

    use_container_width=True
)

st.markdown(
    '''
    Uma caracter√≠stica muito comum em problemas de inadimpl√™ncia foi o desbalanceamento de dados. Em nosso dataset, p√¥de-se observar que apenas 22% da nossa base foi considerada inadimplente.
    '''
)

st.subheader('`PAY_1`')

pay1 = df.groupby('PAY_1')['default payment next month'].mean()
pay1 = (pay1*100).round(2)
fig = px.line(pay1, 
              x=pay1.index,             
              y='default payment next month', 
              markers=True,
              labels={'PAY_1': 'PAY_1', 'default payment next month': 'Propor√ß√£o de inadimpl√™ncia'},
              title='Propor√ß√£o de Inadimpl√™ncia por PAY_1'
              )

target_mean = df['default payment next month'].mean()
target_mean = (target_mean*100).round(2)

fig.add_trace(go.Scatter(x=df['PAY_1'], 
                         y=[target_mean] * len(df),  
                         mode='lines',
                         line=dict(color='red'),
                         name='M√©dia de inadimpl√™ncia')
                         )
fig.update_layout(
        legend=dict(
            orientation="h",
            yanchor="top",  # Alinha a parte inferior da legenda
            y=1.14,
            xanchor="left",  # Centraliza a legenda
            x=-0.09
            )
        )       

st.plotly_chart(fig)

st.markdown(
    '''
    O gr√°fico acima mostrou uma informa√ß√£o muito importante: quem j√° havia inadimplido apresentou uma tend√™ncia maior de faz√™-lo novamente. A taxa de inadimpl√™ncia de contas que estavam em boa situa√ß√£o ficou bem abaixo da taxa geral, e pelo menos 30% das contas que estavam inadimplentes no √∫ltimo m√™s ficaram inadimplentes novamente.
    '''
)

st.subheader('`LIMIT_BAL`')

limit_bal = df.copy()
limit_bal["default payment next month"] = limit_bal["default payment next month"].replace({0: "Adimplente", 1: "Inadimplente"})

fig = px.histogram(limit_bal, 
                   x='LIMIT_BAL',
                   color="default payment next month",    
                   histnorm='percent',
                   barmode='overlay',
                   opacity=0.4,
                   color_discrete_map={'Adimplente': '#669bbc', 'Inadimplente': '#bc4749'},
                   title=f'Distribui√ß√£o de LIMIT_BAL por categoria de Inadimpl√™ncia',
                   nbins=100)
    
fig.update_layout(
        xaxis_title='LIMIT_BAL',
        yaxis_title="Propor√ß√£o de inadimpl√™ncia",
        legend=dict(
            title='',
            orientation="h",
            yanchor="top",
            y=1.14,
            xanchor="left",
            x=-0.09
            )
    )

st.plotly_chart(fig)

st.markdown('''
    Aparentemente, contas com limites menores de cr√©dito, de aproximadamente R$ 26.5500, foram relativamente mais propensas a inadimplir. O que fez sentido ao entender que as institui√ß√µes deram limites menores a contas que apresentavam mais risco de inadimpl√™ncia.
    ''')

st.subheader('`PAY_AMT`')

# Features de PAY_AMT
pay_amt_feats = ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']
zero_mask = df[pay_amt_feats] != 0  

# Aplicando log10
pay_amt_log = df[pay_amt_feats][zero_mask].apply(np.log10)
pay_amt = pd.concat([pay_amt_log, df['default payment next month']], axis=1)

# Criando subplots com Plotly
fig = sp.make_subplots(rows=2, cols=3, subplot_titles=pay_amt_feats)

# Defini√ß√£o de cores
colors = {0: '#669bbc', 1: '#bc4749'}

# Loop para adicionar histogramas a cada subplot
for i, col in enumerate(pay_amt_feats):
    row = i // 3 + 1
    col_pos = i % 3 + 1 
    
    for label in [0, 1]:  # 0 = Adimplente, 1 = Inadimplente
        fig.add_trace(
            px.histogram(pay_amt[pay_amt['default payment next month'] == label], x=col, nbins=100, opacity=0.6).data[0],
            row=row, col=col_pos
        )
        fig.data[-1].marker.color = colors[label]
        fig.data[-1].name = "Inadimplente" if label == 1 else "Adimplente"

# Ajustando layout
fig.update_layout(
    title="Distribui√ß√£o dos Pagamentos (log10)",
    barmode='overlay',
    showlegend=True,
    height=600,
    width=1000
)

st.plotly_chart(fig)

st.markdown('Os gr√°ficos mostraram uma rela√ß√£o entre as vari√°veis `PAY_AMT` e a vari√°vel alvo `default payment next month`. Observou-se que, ao longo do tempo, essa rela√ß√£o foi se tornando menos evidente. Nos pagamentos mais recentes, houve uma distor√ß√£o na curva para a esquerda, indicando que clientes que realizaram pagamentos menores tiveram uma maior probabilidade de inadimpl√™ncia.')